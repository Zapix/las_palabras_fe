/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/vocabulary": {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    get: operations["list_words"];
    put?: never;
    post: operations["create_word"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/vocabulary/{id}": {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    get: operations["get_word"];
    put?: never;
    post?: never;
    delete: operations["delete_word"];
    options?: never;
    head?: never;
    patch: operations["update_word"];
    trace?: never;
  };
  "/health": {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    get: operations["health"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/info": {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    get: operations["info"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Info: { environment: string; version: string };
    Pagination_Word: {
      items: {
        /** Format: date-time */
        created_at: string;
        /** Format: uuid */
        id: string;
        is_verified: boolean;
        part_of_speech: components["schemas"]["PartOfSpeech"];
        russian: string;
        spanish: string;
        /** Format: date-time */
        updated_at: string;
      }[];
      /** Format: int64 */
      page: number;
      /** Format: int64 */
      per_page: number;
      /** Format: int64 */
      total: number;
    };
    /** @enum {string} */
    PartOfSpeech:
      | "noun"
      | "verb"
      | "adjective"
      | "adverb"
      | "pronoun"
      | "preposition"
      | "conjunction"
      | "interjection"
      | "other";
    RawWord: {
      is_verified?: boolean | null;
      part_of_speech: components["schemas"]["PartOfSpeech"];
      russian: string;
      spanish: string;
    };
    UpdateVocabularyData: {
      is_verified?: boolean | null;
      part_of_speech?: string | null;
      russian?: string | null;
      spanish?: string | null;
    };
    Word: {
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      id: string;
      is_verified: boolean;
      part_of_speech: components["schemas"]["PartOfSpeech"];
      russian: string;
      spanish: string;
      /** Format: date-time */
      updated_at: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_words: {
    parameters: {
      query?: {
        /** @description Page number, starting from 0 */
        page?: number;
        /** @description Number of items per page */
        per_page?: number;
        /** @description Filter by verification status */
        is_verified?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of words */
      200: {
        headers: { [name: string]: unknown };
        content: {
          "application/json": components["schemas"]["Pagination_Word"];
        };
      };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  create_word: {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    requestBody: {
      content: { "application/json": components["schemas"]["RawWord"] };
    };
    responses: {
      /** @description Word created successfully */
      201: {
        headers: { [name: string]: unknown };
        content: { "application/json": components["schemas"]["Word"] };
      };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  get_word: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the word to retrieve */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Word details */
      200: {
        headers: { [name: string]: unknown };
        content: { "application/json": components["schemas"]["Word"] };
      };
      /** @description Word not found */
      404: { headers: { [name: string]: unknown }; content?: never };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  delete_word: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the word to delete */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Word deleted successfully */
      204: { headers: { [name: string]: unknown }; content?: never };
      /** @description Word not found */
      404: { headers: { [name: string]: unknown }; content?: never };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  update_word: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the word to update */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVocabularyData"];
      };
    };
    responses: {
      /** @description Word updated successfully */
      200: {
        headers: { [name: string]: unknown };
        content: { "application/json": components["schemas"]["Word"] };
      };
      /** @description Word not found */
      404: { headers: { [name: string]: unknown }; content?: never };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  health: {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    requestBody?: never;
    responses: {
      /** @description Health check successful */
      200: {
        headers: { [name: string]: unknown };
        content: { "text/plain": string };
      };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
  info: {
    parameters: { query?: never; header?: never; path?: never; cookie?: never };
    requestBody?: never;
    responses: {
      /** @description Service information */
      200: {
        headers: { [name: string]: unknown };
        content: { "application/json": components["schemas"]["Info"] };
      };
      /** @description Internal server error */
      500: { headers: { [name: string]: unknown }; content?: never };
    };
  };
}
